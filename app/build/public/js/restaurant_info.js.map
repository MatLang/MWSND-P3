{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/dbhelper.js","js/restaurant_info.js","node_modules/idb/lib/idb.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","dbPromise","DBHelper","callback","this","getCachedMessages","then","data","fetch","response","json","restaurants","Promise","all","map","restaurant","id","reviews","db","store","openObjectStore","forEach","put","openCursor","cursor","advance","deleteRest","res","fetchRestaurants","error","find","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","uniqueNeighborhoods","v","indexOf","cuisines","uniqueCuisines","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","storeName","transactionMode","arguments","undefined","transaction","objectStore","_idb2","open","upgradeDb","objectStoreNames","contains","createObjectStore","keyPath","openDatabase","getAll","triggerReviewRequestQueueSync","navigator","serviceWorker","ready","swRegistration","sync","register","document","getElementById","addEventListener","console","log","form","reviewerName","value","comment","textarea","ratings","querySelectorAll","restaurantId","window","location","href","split","rating","_step","_iterator","Symbol","iterator","_iteratorNormalCompletion","next","done","item","checked","body","restaurant_id","comments","createdAt","Date","now","updatedAt","review","createReviewHTML","appendChild","_dbhelper2","get","parseInt","restaurantStore","reviewQueue","push","complete","initMap","fetchRestaurantFromURL","self","Map","zoom","center","scrollwheel","fillBreadcrumb","mapMarkerForRestaurant","getParameterByName","fetchRestaurantById","fillRestaurantHTML","innerHTML","address","image","className","alt","src","imageUrlForRestaurant","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","time","container","noReviews","setAttribute","ul","li","date","toDateString","breadcrumb","replace","RegExp","exec","decodeURIComponent","promisifyRequest","request","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","set","val","proxyRequestMethods","Constructor","proxyMethods","proxyCursorRequestMethods","Cursor","Index","index","_index","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","arr","Array","slice","nativeObject","query","count","instance","items","iterateCursor","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","event","delete","idb"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import idb from 'idb';\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\n\r\nvar dbPromise;\r\n\r\nclass DBHelper {\r\n\r\n  static openObjectStore = (db, storeName, transactionMode = 'readonly') => {\r\n    return db.transaction(storeName, transactionMode).objectStore(storeName);\r\n  }\r\n\r\n  static openDatabase = function () {\r\n    return idb.open('restaurants', 1, function (upgradeDb) {\r\n      if (!upgradeDb.objectStoreNames.contains('restaurants')) {\r\n        upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\r\n      }\r\n      if (!upgradeDb.objectStoreNames.contains('favqueue')) {\r\n        upgradeDb.createObjectStore('favqueue');\r\n      }\r\n      if (!upgradeDb.objectStoreNames.contains('reviewqueue')) {\r\n        upgradeDb.createObjectStore('reviewqueue');\r\n      }\r\n    })\r\n  }();\r\n\r\n  /**\r\n     * Fetch all restaurants.\r\n     */\r\n  static getCachedMessages = function () {\r\n    dbPromise = this.openDatabase;\r\n    return dbPromise.then(function (db) {\r\n\r\n      if (!db) return;\r\n\r\n      return DBHelper.openObjectStore(db, 'restaurants').getAll();\r\n\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    this.getCachedMessages().then((data) => {\r\n      if (data.length > 0) {\r\n        return callback(null, data);\r\n      }\r\n\r\n      fetch('http://localhost:1337/restaurants').then((response) => {\r\n        return response.json();\r\n      }).then(restaurants => {\r\n        return Promise.all(\r\n          restaurants.map((restaurant) => {\r\n            return fetch(`http://localhost:1337/reviews/?restaurant_id=${restaurant.id}`)\r\n              .then((response) => {\r\n                return response.json()\r\n              }).then((reviews) => {\r\n                restaurant.reviews = reviews;\r\n                return dbPromise.then((db) => {\r\n                  if (!db) return;\r\n                  var store = DBHelper.openObjectStore(db, 'restaurants', 'readwrite')\r\n                  restaurants.forEach(restaurant => store.put(restaurant));\r\n                  return store.openCursor(null, 'prev').then((cursor) => {\r\n                    return cursor.advance(30);\r\n                  }).then(function deleteRest(cursor) {\r\n                    if (!cursor) return;\r\n                    cursor.delete();\r\n                    return cursor.continue()\r\n                      .then(deleteRest);\r\n                  })\r\n                })\r\n              })\r\n          })\r\n        ).then((res) => {\r\n          return callback(null, restaurants);\r\n        });\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    if (restaurant.id == 10) return (`images/10.webp`);\r\n    return (`images/${restaurant.photograph}.webp`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    }\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = DBHelper;\r\n","import DBHelper from './dbhelper';\r\n\r\nlet restaurant;\r\nvar map;\r\n\r\nconst triggerReviewRequestQueueSync = function () {\r\n  navigator.serviceWorker.ready.then(function (swRegistration) {\r\n    swRegistration.sync.register('reviewqueue');\r\n  });\r\n}\r\n\r\nfunction submitReview(body) {\r\n  console.log('triggering');\r\n  return DBHelper.openDatabase\r\n    .then(db => {\r\n      let restaurantStore = DBHelper.openObjectStore(db, 'restaurants', 'readonly');\r\n      return restaurantStore.get(parseInt(body.restaurant_id)).then((restaurant) => {\r\n\r\n        const updateRestaurants = function (restaurant) {\r\n          let restaurantStore = DBHelper.openObjectStore(db, 'restaurants', 'readwrite');\r\n          restaurantStore.put(restaurant);\r\n          return restaurantStore.complete;\r\n        }\r\n\r\n        const updateReviewQueue = function (restaurant) {\r\n          let reviewQueue = DBHelper.openObjectStore(db, 'reviewqueue', 'readwrite');\r\n          reviewQueue.put(body, body.createdAt);\r\n          return reviewQueue.complete;\r\n        }\r\n\r\n        restaurant.reviews.push(body)\r\n\r\n        return Promise.all([updateReviewQueue(restaurant), updateRestaurants(restaurant)])\r\n          .then(() => {\r\n            return triggerReviewRequestQueueSync();\r\n          })\r\n      });\r\n    })\r\n}\r\n\r\nconst submitButton = document.getElementById('submit-button');\r\nsubmitButton.addEventListener('click', function () {\r\n  console.log('triggering');\r\n  const form = document.getElementById(\"reviews-form\");\r\n  let reviewerName = document.getElementById('reviewer-name').value;\r\n  const comment = form.textarea.value;\r\n  const ratings = document.querySelectorAll('input[type=\"radio\"]');\r\n  const restaurantId = window.location.href.split('=')[1];\r\n  let rating = 0;\r\n  for (var item of ratings) {\r\n    if (item.checked == true) {\r\n      rating = item.value;\r\n      break;\r\n    }\r\n  }\r\n\r\n  const body = {\r\n    'restaurant_id': restaurantId,\r\n    'name': reviewerName,\r\n    'rating': rating,\r\n    'comments': comment,\r\n    'createdAt': Date.now(),\r\n    'updatedAt': Date.now()\r\n  }\r\n  form.textarea.value = '';\r\n  document.getElementById('reviewer-name').value = '';\r\n\r\n  const review = createReviewHTML(body);\r\n  const ul = document.getElementById('reviews-list');\r\n  ul.appendChild(review);\r\n  return submitReview(body);\r\n})\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) { // Got an error!\r\n      console.error('error', error);\r\n    } else {\r\n      self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 16,\r\n        center: restaurant.latlng,\r\n        scrollwheel: false\r\n      });\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nvar fetchRestaurantFromURL = (callback) => {\r\n  if (self.restaurant) { // restaurant already fetched!\r\n    console.log('already fetched');\r\n    callback(null, self.restaurant)\r\n    return;\r\n  }\r\n  const id = getParameterByName('id');\r\n  if (!id) { // no id found in URL\r\n    error = 'No restaurant id in URL'\r\n    callback(error, null);\r\n  } else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant)\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nvar fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n  const name = document.getElementById('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  const image = document.getElementById('restaurant-img');\r\n  image.className = 'restaurant-img'\r\n  image.alt = \"Picture of restaurant: \" + restaurant.name;\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n\r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n  // fill operating hours\r\n  if (restaurant.operating_hours) {\r\n    fillRestaurantHoursHTML();\r\n  }\r\n  // fill reviews\r\n  fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nvar fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    row.appendChild(time);\r\n\r\n    hours.appendChild(row);\r\n  }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\n\r\n\r\nvar fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n  const container = document.getElementById('reviews-container');\r\n  const title = document.createElement('h3');\r\n  title.innerHTML = 'Reviews';\r\n  container.appendChild(title);\r\n\r\n  if (!reviews) {\r\n    const noReviews = document.createElement('p');\r\n    noReviews.setAttribute('class', 'white')\r\n    noReviews.innerHTML = 'No reviews yet!';\r\n    container.appendChild(noReviews);\r\n    return;\r\n  }\r\n\r\n  const ul = document.getElementById('reviews-list');\r\n  reviews.forEach(review => {\r\n    ul.appendChild(createReviewHTML(review));\r\n  });\r\n  container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\n\r\n\r\n\r\nvar createReviewHTML = (review) => {\r\n  const li = document.createElement('li');\r\n  li.setAttribute('tabindex', 0);\r\n  const name = document.createElement('p');\r\n  name.innerHTML = review.name;\r\n  li.appendChild(name);\r\n\r\n  const date = document.createElement('p');\r\n  date.innerHTML = new Date(review.createdAt).toDateString();\r\n  li.appendChild(date);\r\n\r\n  const rating = document.createElement('p');\r\n  rating.innerHTML = `Rating: ${review.rating}`;\r\n  li.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  li.appendChild(comments);\r\n\r\n  return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nvar fillBreadcrumb = (restaurant = self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumb');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  li.setAttribute('aria-current', 'page')\r\n  breadcrumb.appendChild(li);\r\n  return breadcrumb;\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nvar getParameterByName = (name, url) => {\r\n  if (!url)\r\n    url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results)\r\n    return null;\r\n  if (!results[2])\r\n    return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n  \n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"]}