{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/dbhelper.js","js/restaurant_info.js","node_modules/idb/lib/idb.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","dbPromise","DBHelper","this","openDatabase","then","db","transaction","objectStore","getAll","callback","getCachedMessages","data","fetch","credentials","response","json","restaurants","store","forEach","restaurant","put","openCursor","cursor","advance","deleteRest","err","id","fetchRestaurants","error","find","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","uniqueNeighborhoods","map","v","indexOf","cuisines","uniqueCuisines","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","storeName","transactionMode","arguments","undefined","_idb2","open","upgradeDb","objectStoreNames","contains","createObjectStore","keyPath","window","initMap","fetchRestaurantFromURL","console","self","Map","document","getElementById","zoom","center","scrollwheel","fillBreadcrumb","_dbhelper2","mapMarkerForRestaurant","log","getParameterByName","fetchRestaurantById","fillRestaurantHTML","innerHTML","address","image","className","alt","src","imageUrlForRestaurant","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","reviews","container","noReviews","ul","review","createReviewHTML","li","date","rating","comments","breadcrumb","setAttribute","location","href","replace","RegExp","exec","decodeURIComponent","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","get","set","val","proxyRequestMethods","Constructor","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","arr","Array","slice","nativeObject","query","count","instance","items","iterateCursor","push","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","event","delete","idb"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import idb from 'idb';\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nvar dbPromise;\r\n\r\nclass DBHelper {\r\n\r\n  static openObjectStore = function (db, storeName, transactionMode = 'read') {\r\n    return db.transaction(storeName, transactionMode).objectStore(storeName);\r\n  }\r\n\r\n  static openDatabase = function () {\r\n    return idb.open('restaurants', 1, function (upgradeDb) {\r\n      if (!upgradeDb.objectStoreNames.contains('restaurants')) {\r\n        upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\r\n      }\r\n      if (!upgradeDb.objectStoreNames.contains('favqueue')) {\r\n        upgradeDb.createObjectStore('favqueue');\r\n      }\r\n    })\r\n  }()\r\n  /*   static openDatabase = idb.open('restaurants', 1, upgradeDB => {\r\n  \r\n      switch (upgradeDB.oldVersion) {\r\n        case 0:\r\n          upgradeDB.createObjectStore('restaurants', { keyPath: 'id' });\r\n        case 1:\r\n          upgradeDB.createObjectStore('favqueue');\r\n      }\r\n    }); */\r\n\r\n\r\n  static getCachedMessages() {\r\n    dbPromise = this.openDatabase;\r\n    return dbPromise.then(function (db) {\r\n\r\n      if (!db) return;\r\n\r\n      var tx = db.transaction('restaurants');\r\n      var store = tx.objectStore('restaurants');\r\n\r\n      return store.getAll();\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 8000 // Change this to your server port\r\n    return `http://localhost:${port}/data/restaurants.json`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    this.getCachedMessages().then(function (data) {\r\n      if (data.length > 0) {\r\n        return callback(null, data);\r\n      }\r\n\r\n      fetch('http://localhost:1337/restaurants', {\r\n        credentials: 'same-origin'\r\n      }).then(function (response) {\r\n        return response.json();\r\n      }).then(restaurants => {\r\n        dbPromise.then(function (db) {\r\n          if (!db) return;\r\n          var tx = db.transaction('restaurants', 'readwrite');\r\n          var store = tx.objectStore('restaurants');\r\n\r\n          restaurants.forEach(restaurant => store.put(restaurant));\r\n\r\n          store.openCursor(null, 'prev').then(function (cursor) {\r\n            return cursor.advance(30);\r\n          }).then(function deleteRest(cursor) {\r\n            if (!cursor) return;\r\n            cursor.delete();\r\n            return cursor.continue().then(deleteRest);\r\n          });\r\n        })\r\n        return callback(null, restaurants);\r\n      })\r\n    }).catch(err => {\r\n      callback(err, null);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    if (restaurant.id == 10) return (`images/10.webp`);\r\n    return (`images/${restaurant.photograph}.webp`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    }\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = DBHelper;","import DBHelper from './dbhelper';\r\n\r\nlet restaurant;\r\nvar map;\r\n\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) { // Got an error!\r\n      console.error('error', error);\r\n    } else {\r\n      self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 16,\r\n        center: restaurant.latlng,\r\n        scrollwheel: false\r\n      });\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nvar fetchRestaurantFromURL = (callback) => {\r\n  if (self.restaurant) { // restaurant already fetched!\r\n    console.log('already fetched');\r\n    callback(null, self.restaurant)\r\n    return;\r\n  }\r\n  const id = getParameterByName('id');\r\n  if (!id) { // no id found in URL\r\n    error = 'No restaurant id in URL'\r\n    callback(error, null);\r\n  } else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant)\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nvar fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n  const name = document.getElementById('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  const image = document.getElementById('restaurant-img');\r\n  image.className = 'restaurant-img'\r\n  image.alt = \"Picture of restaurant: \" + restaurant.name;\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n\r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n  // fill operating hours\r\n  if (restaurant.operating_hours) {\r\n    fillRestaurantHoursHTML();\r\n  }\r\n  // fill reviews\r\n  fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nvar fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    row.appendChild(time);\r\n\r\n    hours.appendChild(row);\r\n  }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nvar fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n  const container = document.getElementById('reviews-container');\r\n  const title = document.createElement('h3');\r\n  title.innerHTML = 'Reviews';\r\n  container.appendChild(title);\r\n\r\n  if (!reviews) {\r\n    const noReviews = document.createElement('p');\r\n    noReviews.innerHTML = 'No reviews yet!';\r\n    container.appendChild(noReviews);\r\n    return;\r\n  }\r\n  const ul = document.getElementById('reviews-list');\r\n  reviews.forEach(review => {\r\n    ul.appendChild(createReviewHTML(review));\r\n  });\r\n  container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nvar createReviewHTML = (review) => {\r\n  const li = document.createElement('li');\r\n  const name = document.createElement('p');\r\n  name.innerHTML = review.name;\r\n  li.appendChild(name);\r\n\r\n  const date = document.createElement('p');\r\n  date.innerHTML = review.date;\r\n  li.appendChild(date);\r\n\r\n  const rating = document.createElement('p');\r\n  rating.innerHTML = `Rating: ${review.rating}`;\r\n  li.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  li.appendChild(comments);\r\n\r\n  return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nvar fillBreadcrumb = (restaurant = self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumb');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  li.setAttribute('aria-current', 'page')\r\n  breadcrumb.appendChild(li);\r\n  return breadcrumb;\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nvar getParameterByName = (name, url) => {\r\n  if (!url)\r\n    url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results)\r\n    return null;\r\n  if (!results[2])\r\n    return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n  \n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"]}