{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/dbhelper.js","js/main.js","node_modules/idb/lib/idb.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","dbPromise","DBHelper","callback","this","getCachedMessages","then","data","fetch","response","json","restaurants","Promise","all","map","restaurant","id","reviews","db","store","openObjectStore","forEach","put","openCursor","cursor","advance","deleteRest","res","fetchRestaurants","error","find","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","uniqueNeighborhoods","v","indexOf","cuisines","uniqueCuisines","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","storeName","transactionMode","arguments","undefined","transaction","objectStore","_idb2","open","upgradeDb","objectStoreNames","contains","createObjectStore","keyPath","openDatabase","getAll","markers","_dbhelper2","toggleFavorite","event","restaurantId","parseInt","getAttribute","favoriteButton","document","getElementById","isFavorised","hasAttribute","restaurantName","removeAttribute","setAttribute","innerHTML","get","isFavorite","is_favorite","toString","restaurantStore","favStore","method","complete","navigator","serviceWorker","ready","swRegistration","sync","register","err","console","log","addEventListener","fetchNeighborhoods","fetchCuisines","setEventListeners","updateRestaurants","self","fillNeighborhoodsHTML","select","option","createElement","value","append","fillCuisinesHTML","window","initMap","Map","zoom","center","lat","lng","scrollwheel","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","m","setMap","tabIndex","ul","createRestaurantHTML","lazyImageObserver","lazyImages","slice","querySelectorAll","IntersectionObserver","entries","observer","entry","isIntersecting","lazyImage","target","src","dataset","srcset","classList","remove","unobserve","observe","addMarkersToMap","isRestaurantFavorite","li","picture","image","className","imageUrlForRestaurant","alt","address","more","href","marker","mapMarkerForRestaurant","addListener","location","push","promisifyRequest","request","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","set","val","proxyRequestMethods","Constructor","proxyMethods","proxyCursorRequestMethods","Cursor","Index","index","_index","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","replace","arr","Array","nativeObject","query","count","instance","items","iterateCursor","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","delete","idb"],"mappings":"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","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import idb from 'idb';\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\n\r\nvar dbPromise;\r\n\r\nclass DBHelper {\r\n\r\n  static openObjectStore = (db, storeName, transactionMode = 'readonly') => {\r\n    return db.transaction(storeName, transactionMode).objectStore(storeName);\r\n  }\r\n\r\n  static openDatabase = function () {\r\n    return idb.open('restaurants', 1, function (upgradeDb) {\r\n      if (!upgradeDb.objectStoreNames.contains('restaurants')) {\r\n        upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\r\n      }\r\n      if (!upgradeDb.objectStoreNames.contains('favqueue')) {\r\n        upgradeDb.createObjectStore('favqueue');\r\n      }\r\n      if (!upgradeDb.objectStoreNames.contains('reviewqueue')) {\r\n        upgradeDb.createObjectStore('reviewqueue');\r\n      }\r\n    })\r\n  }();\r\n\r\n  /**\r\n     * Fetch all restaurants.\r\n     */\r\n  static getCachedMessages = function () {\r\n    dbPromise = this.openDatabase;\r\n    return dbPromise.then(function (db) {\r\n\r\n      if (!db) return;\r\n\r\n      return DBHelper.openObjectStore(db, 'restaurants').getAll();\r\n\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    this.getCachedMessages().then((data) => {\r\n      if (data.length > 0) {\r\n        return callback(null, data);\r\n      }\r\n\r\n      fetch('http://localhost:1337/restaurants').then((response) => {\r\n        return response.json();\r\n      }).then(restaurants => {\r\n        return Promise.all(\r\n          restaurants.map((restaurant) => {\r\n            return fetch(`http://localhost:1337/reviews/?restaurant_id=${restaurant.id}`)\r\n              .then((response) => {\r\n                return response.json()\r\n              }).then((reviews) => {\r\n                restaurant.reviews = reviews;\r\n                return dbPromise.then((db) => {\r\n                  if (!db) return;\r\n                  var store = DBHelper.openObjectStore(db, 'restaurants', 'readwrite')\r\n                  restaurants.forEach(restaurant => store.put(restaurant));\r\n                  return store.openCursor(null, 'prev').then((cursor) => {\r\n                    return cursor.advance(30);\r\n                  }).then(function deleteRest(cursor) {\r\n                    if (!cursor) return;\r\n                    cursor.delete();\r\n                    return cursor.continue()\r\n                      .then(deleteRest);\r\n                  })\r\n                })\r\n              })\r\n          })\r\n        ).then((res) => {\r\n          return callback(null, restaurants);\r\n        });\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    if (restaurant.id == 10) return (`images/10.webp`);\r\n    return (`images/${restaurant.photograph}.webp`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    }\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = DBHelper;\r\n","import DBHelper from './dbhelper';\r\n\r\nlet restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar map\r\nvar markers = [];\r\n\r\nlet dbPromise = DBHelper.openDatabase;\r\nlet openObjectStore = DBHelper.openObjectStore;\r\n\r\nconst triggerFavoriteRequestQueueSync = function () {\r\n  navigator.serviceWorker.ready.then(function (swRegistration) {\r\n    swRegistration.sync.register('favqueue');\r\n  });\r\n}\r\n\r\nconst toggleFavorite = function (event) {\r\n  const restaurantId = parseInt(this.getAttribute('restaurantId'));\r\n  const favoriteButton = document.getElementById(`favoriteButton${restaurantId}`);\r\n  const isFavorised = favoriteButton.hasAttribute('favorised');\r\n  const restaurantName = favoriteButton.getAttribute('restaurantname');\r\n  if (isFavorised) {\r\n    favoriteButton.removeAttribute('favorised');\r\n    favoriteButton.setAttribute('aria-label', `Mark ${restaurantName} as favorite`);\r\n    favoriteButton.innerHTML = 'Mark as favorite';\r\n  } else {\r\n    favoriteButton.setAttribute('favorised', '');\r\n    favoriteButton.setAttribute('aria-label', `Remove ${restaurantName} from favorites`);\r\n    favoriteButton.innerHTML = 'Remove from favorites';\r\n  }\r\n  dbPromise.then(function (db) {\r\n    var restaurantStore = DBHelper.openObjectStore(db, 'restaurants', 'readonly')\r\n    return restaurantStore.get(restaurantId);\r\n  }).then(restaurant => {\r\n    const isFavorite = !(restaurant.is_favorite == 'true');\r\n    restaurant.is_favorite = isFavorite.toString();\r\n    return dbPromise.then(function (db) {\r\n      var restaurantStore = openObjectStore(db, 'restaurants', 'readwrite');\r\n      var favStore = openObjectStore(db, 'favqueue', 'readwrite');\r\n      restaurantStore.put(restaurant);\r\n      restaurant.url = `http://localhost:1337/restaurants/${restaurant.id}/?is_favorite=${isFavorite}`;\r\n      restaurant.method = \"put\";\r\n      favStore.put(restaurant, restaurant.id);\r\n      restaurantStore.complete;\r\n      return favStore.complete\r\n    }).then(() => {\r\n      return triggerFavoriteRequestQueueSync()\r\n    }).catch((err) => console.log(err))\r\n  })\r\n};\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded. asd\r\n */\r\n\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  setEventListeners();\r\n\r\n});\r\n\r\nvar setEventListeners = () => {\r\n  var neighborHoodSelect = document.getElementById('neighborhoods-select');\r\n  neighborHoodSelect.addEventListener('change', function () {\r\n    updateRestaurants();\r\n  });\r\n\r\n  var cuisineSelect = document.getElementById('cuisines-select');\r\n  cuisineSelect.addEventListener('change', function () {\r\n    updateRestaurants();\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nvar fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nvar fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nvar fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nvar fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nvar updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nvar resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  markers.forEach(m => m.setMap(null));\r\n  markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nvar fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  let tabIndex = 3;\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant, tabIndex));\r\n    tabIndex++;\r\n  });\r\n\r\n  var lazyImages = [].slice.call(document.querySelectorAll(\"img.lazy\"));\r\n\r\n  if (\"IntersectionObserver\" in window) {\r\n    let lazyImageObserver = new IntersectionObserver(function (entries, observer) {\r\n      entries.forEach(function (entry) {\r\n        if (entry.isIntersecting) {\r\n          let lazyImage = entry.target;\r\n          lazyImage.src = lazyImage.dataset.src;\r\n          lazyImage.srcset = lazyImage.dataset.srcset;\r\n          lazyImage.classList.remove(\"lazy\");\r\n          lazyImageObserver.unobserve(lazyImage);\r\n        }\r\n      });\r\n    });\r\n\r\n    lazyImages.forEach(function (lazyImage) {\r\n      lazyImageObserver.observe(lazyImage);\r\n    });\r\n  } else {\r\n    // Possibly fall back to a more compatible method here\r\n  }\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nvar createRestaurantHTML = (restaurant, tabIndex) => {\r\n  const restaurantId = restaurant.id;\r\n\r\n  const isRestaurantFavorite = (restaurant.is_favorite == 'true');\r\n\r\n  const li = document.createElement('li');\r\n\r\n  const picture = document.createElement('picture');\r\n\r\n  const favoriteButton = document.createElement('button');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img lazy';\r\n  /* image.tabIndex = 0; */\r\n  let src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.setAttribute('src', '');\r\n  image.setAttribute('data-src', src);\r\n  image.setAttribute('data-srcset', src);\r\n  image.alt = '';\r\n  picture.append(image);\r\n  li.append(picture);\r\n\r\n  const name = document.createElement('h2');\r\n  name.setAttribute('tabIndex', 0);\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  if (isRestaurantFavorite) {\r\n    favoriteButton.setAttribute('favorised', '');\r\n    favoriteButton.setAttribute('aria-label', `Remove ${restaurant.name} from favorites`);\r\n    favoriteButton.innerHTML = 'Remove from favorites';\r\n  } else {\r\n    favoriteButton.setAttribute('aria-label', `Mark ${restaurant.name} as favorite`);\r\n    favoriteButton.innerHTML = 'Mark as favorite';\r\n  }\r\n\r\n  favoriteButton.setAttribute('restaurantId', restaurantId);\r\n  favoriteButton.setAttribute('restaurantname', restaurant.name);\r\n  favoriteButton.id = `favoriteButton${restaurantId}`;\r\n  \r\n  \r\n\r\n  favoriteButton.addEventListener('click', toggleFavorite);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  /* more.setAttribute('tabIndex', tabIndex.toString()); */\r\n  more.setAttribute('tabIndex', 0);\r\n  more.setAttribute('aria-label', 'Details for' + restaurant.name);\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more);\r\n  li.append(favoriteButton);\r\n\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nvar addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    markers.push(marker);\r\n  });\r\n}\r\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n  \n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"]}