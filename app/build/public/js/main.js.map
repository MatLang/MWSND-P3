{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/dbhelper.js","js/main.js","node_modules/idb/lib/idb.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","dbPromise","DBHelper","_idb2","open","upgradeDb","createObjectStore","keyPath","this","openDatabase","then","db","transaction","objectStore","getAll","callback","getCachedMessages","data","fetch","credentials","response","json","restaurants","store","forEach","restaurant","put","openCursor","cursor","advance","deleteRest","err","id","fetchRestaurants","error","find","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","uniqueNeighborhoods","map","v","indexOf","cuisines","uniqueCuisines","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","markers","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","setEventListeners","getElementById","updateRestaurants","_dbhelper2","console","self","fillNeighborhoodsHTML","arguments","undefined","select","option","createElement","innerHTML","value","append","fillCuisinesHTML","window","initMap","Map","zoom","center","lat","lng","scrollwheel","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","m","setMap","tabIndex","ul","createRestaurantHTML","lazyImageObserver","lazyImages","slice","querySelectorAll","IntersectionObserver","entries","observer","entry","isIntersecting","lazyImage","target","src","dataset","srcset","classList","remove","unobserve","observe","addMarkersToMap","li","picture","image","className","imageUrlForRestaurant","setAttribute","alt","address","more","toString","href","marker","mapMarkerForRestaurant","addListener","location","push","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","get","set","val","proxyRequestMethods","Constructor","proxyMethods","proxyCursorRequestMethods","Cursor","Index","index","_index","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","replace","arr","Array","nativeObject","query","count","instance","items","iterateCursor","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","delete","idb"],"mappings":"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","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import idb from 'idb';\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nvar dbPromise;\r\n\r\nclass DBHelper {\r\n\r\n  static openDatabase() {\r\n    return idb.open('restaurants', 1, function (upgradeDb) {\r\n      upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\r\n    });\r\n  }\r\n\r\n  static getCachedMessages() {\r\n    dbPromise = this.openDatabase();\r\n    return dbPromise.then(function (db) {\r\n\r\n      if (!db) return;\r\n\r\n      var tx = db.transaction('restaurants');\r\n      var store = tx.objectStore('restaurants');\r\n\r\n      return store.getAll();\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 8000 // Change this to your server port\r\n    return `http://localhost:${port}/data/restaurants.json`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    this.getCachedMessages().then(function (data) {\r\n      if (data.length > 0) {\r\n        return callback(null, data);\r\n      }\r\n\r\n      fetch('http://localhost:1337/restaurants', {\r\n        credentials: 'same-origin'\r\n      }).then(function (response) {\r\n        return response.json();\r\n      }).then(restaurants => {\r\n        dbPromise.then(function (db) {\r\n          if (!db) return;\r\n          var tx = db.transaction('restaurants', 'readwrite');\r\n          var store = tx.objectStore('restaurants');\r\n\r\n          restaurants.forEach(restaurant => store.put(restaurant));\r\n\r\n          store.openCursor(null, 'prev').then(function (cursor) {\r\n            return cursor.advance(30);\r\n          }).then(function deleteRest(cursor) {\r\n            if (!cursor) return;\r\n            cursor.delete();\r\n            return cursor.continue().then(deleteRest);\r\n          });\r\n        })\r\n        return callback(null, restaurants);\r\n      })\r\n    }).catch(err => {\r\n      callback(err, null);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    if (restaurant.id == 10) return (`./build/public/images/10.webp`);\r\n    return (`./build/public/images/${restaurant.photograph}.webp`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    }\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = DBHelper;","import DBHelper from './dbhelper';\r\n\r\nlet restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar map\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded. asd\r\n */\r\n\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  setEventListeners();\r\n\r\n});\r\n\r\nvar setEventListeners = () => {\r\n  var neighborHoodSelect = document.getElementById('neighborhoods-select');\r\n  neighborHoodSelect.addEventListener('change', function () {\r\n    updateRestaurants();\r\n\r\n  });\r\n\r\n  var cuisineSelect = document.getElementById('cuisines-select');\r\n  cuisineSelect.addEventListener('change', function () {\r\n    updateRestaurants();\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nvar fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nvar fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nvar fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nvar fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('li');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nvar updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nvar resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  markers.forEach(m => m.setMap(null));\r\n  markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nvar fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  let tabIndex = 3;\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant, tabIndex));\r\n    tabIndex++;\r\n  });\r\n\r\n  var lazyImages = [].slice.call(document.querySelectorAll(\"img.lazy\"));\r\n\r\n  if (\"IntersectionObserver\" in window) {\r\n    let lazyImageObserver = new IntersectionObserver(function (entries, observer) {\r\n      entries.forEach(function (entry) {\r\n        if (entry.isIntersecting) {\r\n          let lazyImage = entry.target;\r\n          lazyImage.src = lazyImage.dataset.src;\r\n          lazyImage.srcset = lazyImage.dataset.srcset;\r\n          lazyImage.classList.remove(\"lazy\");\r\n          lazyImageObserver.unobserve(lazyImage);\r\n        }\r\n      });\r\n    });\r\n\r\n    lazyImages.forEach(function (lazyImage) {\r\n      lazyImageObserver.observe(lazyImage);\r\n    });\r\n  } else {\r\n    // Possibly fall back to a more compatible method here\r\n  }\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nvar createRestaurantHTML = (restaurant, tabIndex) => {\r\n  const li = document.createElement('li');\r\n\r\n  const picture = document.createElement('picture');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img lazy';\r\n  image.tabIndex = 0;\r\n  let src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.setAttribute('src', '');\r\n  image.setAttribute('data-src', src);\r\n  image.setAttribute('data-srcset', src);\r\n  image.alt = '';\r\n  picture.append(image);\r\n  li.append(picture);\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.setAttribute('tabIndex', tabIndex.toString());\r\n  more.setAttribute('aria-label', 'Details for' + restaurant.name);\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more)\r\n\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nvar addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    markers.push(marker);\r\n  });\r\n}\r\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n  \n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"]}