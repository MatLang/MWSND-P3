{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/dbhelper.js","node_modules/idb/lib/idb.js","sw.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","dbPromise","DBHelper","callback","this","getCachedMessages","then","data","fetch","response","json","restaurants","Promise","all","map","restaurant","id","reviews","db","store","openObjectStore","forEach","put","openCursor","cursor","advance","deleteRest","res","fetchRestaurants","error","find","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","uniqueNeighborhoods","v","indexOf","cuisines","uniqueCuisines","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","storeName","transactionMode","arguments","undefined","transaction","objectStore","_idb2","open","upgradeDb","objectStoreNames","contains","createObjectStore","keyPath","openDatabase","getAll","promisifyRequest","request","resolve","reject","onsuccess","result","onerror","promisifyRequestCall","obj","method","args","p","apply","proxyProperties","ProxyClass","targetProp","properties","prop","Object","defineProperty","prototype","get","set","val","proxyRequestMethods","Constructor","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","_cursor","_request","ObjectStore","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","oldVersion","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","IDBTransaction","IDBDatabase","funcName","replace","arr","Array","slice","nativeObject","query","count","instance","items","iterateCursor","push","continue","exp","version","upgradeCallback","indexedDB","onupgradeneeded","event","delete","self","idb","upgradeDB","urlsToCache","addEventListener","waitUntil","caches","cache","addAll","clients","claim","tag","favorites","favorite","tx","console","log","_jsDbhelper2","review","body","JSON","stringify","createdAt","err"],"mappings":"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","file":"sw.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import idb from 'idb';\n\n/**\n * Common database helper functions.\n */\n\nvar dbPromise;\n\nclass DBHelper {\n\n  static openObjectStore = (db, storeName, transactionMode = 'readonly') => {\n    return db.transaction(storeName, transactionMode).objectStore(storeName);\n  }\n\n  static openDatabase = function () {\n    return idb.open('restaurants', 1, function (upgradeDb) {\n      if (!upgradeDb.objectStoreNames.contains('restaurants')) {\n        upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\n      }\n      if (!upgradeDb.objectStoreNames.contains('favqueue')) {\n        upgradeDb.createObjectStore('favqueue');\n      }\n      if (!upgradeDb.objectStoreNames.contains('reviewqueue')) {\n        upgradeDb.createObjectStore('reviewqueue');\n      }\n    })\n  }();\n\n  /**\n     * Fetch all restaurants.\n     */\n  static getCachedMessages = function () {\n    dbPromise = this.openDatabase;\n    return dbPromise.then(function (db) {\n\n      if (!db) return;\n\n      return DBHelper.openObjectStore(db, 'restaurants').getAll();\n\n    })\n  }\n\n  /**\n   * Fetch all restaurants.\n   */\n  static fetchRestaurants(callback) {\n    this.getCachedMessages().then((data) => {\n      if (data.length > 0) {\n        return callback(null, data);\n      }\n\n      fetch('http://localhost:1337/restaurants').then((response) => {\n        return response.json();\n      }).then(restaurants => {\n        return Promise.all(\n          restaurants.map((restaurant) => {\n            return fetch(`http://localhost:1337/reviews/?restaurant_id=${restaurant.id}`)\n              .then((response) => {\n                return response.json()\n              }).then((reviews) => {\n                restaurant.reviews = reviews;\n                return dbPromise.then((db) => {\n                  if (!db) return;\n                  var store = DBHelper.openObjectStore(db, 'restaurants', 'readwrite')\n                  restaurants.forEach(restaurant => store.put(restaurant));\n                  return store.openCursor(null, 'prev').then((cursor) => {\n                    return cursor.advance(30);\n                  }).then(function deleteRest(cursor) {\n                    if (!cursor) return;\n                    cursor.delete();\n                    return cursor.continue()\n                      .then(deleteRest);\n                  })\n                })\n              })\n          })\n        ).then((res) => {\n          return callback(null, restaurants);\n        });\n      })\n    })\n  }\n\n  /**\n   * Fetch a restaurant by its ID.\n   */\n  static fetchRestaurantById(id, callback) {\n    // fetch all restaurants with proper error handling.\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        const restaurant = restaurants.find(r => r.id == id);\n        if (restaurant) { // Got the restaurant\n          callback(null, restaurant);\n        } else { // Restaurant does not exist in the database\n          callback('Restaurant does not exist', null);\n        }\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine type with proper error handling.\n   */\n  static fetchRestaurantByCuisine(cuisine, callback) {\n    // Fetch all restaurants  with proper error handling\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given cuisine type\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given neighborhood\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        let results = restaurants\n        if (cuisine != 'all') { // filter by cuisine\n          results = results.filter(r => r.cuisine_type == cuisine);\n        }\n        if (neighborhood != 'all') { // filter by neighborhood\n          results = results.filter(r => r.neighborhood == neighborhood);\n        }\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch all neighborhoods with proper error handling.\n   */\n  static fetchNeighborhoods(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all neighborhoods from all restaurants\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\n        // Remove duplicates from neighborhoods\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\n        callback(null, uniqueNeighborhoods);\n      }\n    });\n  }\n\n  /**\n   * Fetch all cuisines with proper error handling.\n   */\n  static fetchCuisines(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all cuisines from all restaurants\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\n        // Remove duplicates from cuisines\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\n        callback(null, uniqueCuisines);\n      }\n    });\n  }\n\n  /**\n   * Restaurant page URL.\n   */\n  static urlForRestaurant(restaurant) {\n    return (`./restaurant.html?id=${restaurant.id}`);\n  }\n\n  /**\n   * Restaurant image URL.\n   */\n  static imageUrlForRestaurant(restaurant) {\n    if (restaurant.id == 10) return (`images/10.webp`);\n    return (`images/${restaurant.photograph}.webp`);\n  }\n\n  /**\n   * Map marker for a restaurant.\n   */\n  static mapMarkerForRestaurant(restaurant, map) {\n    const marker = new google.maps.Marker({\n      position: restaurant.latlng,\n      title: restaurant.name,\n      url: DBHelper.urlForRestaurant(restaurant),\n      map: map,\n      animation: google.maps.Animation.DROP\n    }\n    );\n    return marker;\n  }\n\n}\n\nmodule.exports = DBHelper;\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n  \n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","import DBHelper from './js/dbhelper';\nimport idb from 'idb';\n\nconst dbPromise = idb.open('restaurants', 1, upgradeDB => {\n\n  switch (upgradeDB.oldVersion) {\n    case 0:\n      upgradeDB.createObjectStore('restaurants', { keyPath: 'id' });\n    case 1:\n      upgradeDB.createObjectStore('favqueue');\n  }\n});\n\n/*  const dbPromise = DBHelper.openDatabase; */\n\nvar CACHE_NAME = 'restaurant-cache';\nvar urlsToCache = [\n  '/',\n  './index.html',\n  './restaurant.html',\n  './css/styles.css',\n  './js/main.js',\n  './js/restaurant_info.js',\n  './js/dbhelper.js',\n  './images/1.jpg',\n  './images/2.jpg',\n  './images/3.jpg',\n  './images/4.jpg',\n  './images/5.jpg',\n  './images/6.jpg',\n  './images/7.jpg',\n  './images/8.jpg',\n  './images/9.jpg',\n  './images/10.jpg',\n  './images/1.webp',\n  './images/2.webp',\n  './images/3.webp',\n  './images/4.webp',\n  './images/5.webp',\n  './images/6.webp',\n  './images/7.webp',\n  './images/8.webp',\n  './images/9.webp',\n  './images/10.webp',\n  './images/cutlery.svg',\n  '../../manifest.json'\n];\n\nself.addEventListener('install', function (event) {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(function (cache) {\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n\nself.addEventListener('activate', event => {\n  event.waitUntil(self.clients.claim());\n});\n\n/* self.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request, { ignoreSearch: true }).then(response => {\n      return response || fetch(event.request);\n    })\n      .catch(err => console.log(err, event.request))\n  );\n}); */\n\n/**\n   * Background sync restaurant reviews\n   */\nconst syncReviews = function () {\n  return dbPromise.then(db => {\n    let reviewStore = DBHelper.openObjectStore(db, 'reviewqueue', 'readonly');\n    return reviewStore.getAll().then(reviews => {\n      return Promise.all(\n        reviews.map((review) => {\n          console.log(review)\n          return fetch('http://localhost:1337/reviews/', {\n            method: 'post',\n            body: JSON.stringify(review)\n          }).then((response) => {\n            const tx = db.transaction('reviewqueue', 'readwrite');\n            tx.objectStore('reviewqueue').delete(review.createdAt);\n            return tx.complete;\n          }).catch(err => {\n            console.log('err', err)\n          })\n        })\n      ).catch((err) => console.log(err))\n    })\n  }).catch((err) => console.log(err))\n}\n\n\n\n/**\n   * Background sync favorite restaurants\n   */\nconst syncFavorites = function () {\n  dbPromise.then(db => {\n    return db.transaction('favqueue')\n      .objectStore('favqueue').getAll()\n  }).then(favorites => {\n    return Promise.all(\n      favorites.map((favorite) => {\n        return fetch(favorite.url, {\n          method: favorite.method\n        }).then((response) => {\n          return dbPromise.then(db => {\n            const tx = db.transaction('favqueue', 'readwrite');\n            tx.objectStore('favqueue').delete(favorite.id);\n            return tx.complete;\n          })\n        }).catch(res => {\n          console.log('res', res)\n        })\n      })\n    )\n  })\n}\n\nself.addEventListener('sync', function (event) {\n  if (event.tag === 'favqueue') {\n    event.waitUntil(\n      syncFavorites()\n    )\n  } else if (event.tag === 'reviewqueue') {\n    event.waitUntil(\n      syncReviews()\n    )\n  }\n})\n"]}